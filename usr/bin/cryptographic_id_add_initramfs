#!/usr/bin/sh
DIR="/etc/cryptographic_id/initramfs"
TMPDIR=
TMPKEY=
NL='
'
help() {
	cat << EOF
Create identity in the initramfs directory. (Rebuild it to include new keys.)
Add a unencrypted identity:
	${0} insecure NAME
Add a age-encrypted identity
	${0} insecure-age NAME
Add an identity stored in a tpm2
	${0} tpm2 NAME [--handle-only]
		--handle-only: dont store sensitive portion of the tpm2-object
		               private-key is lost, if handle gets removed
		               from the tpm2.
EOF
}
cleanup() {
	umount "${TMPDIR}"
	rm -rf "${TMPDIR}"
}
create_tmpdir() {
	trap cleanup EXIT
	TMPDIR="$(mktemp -d || exit 1)"
	mount -t tmpfs tmpfs "${TMPDIR}"
	chmod 700 "${TMPDIR}"
}
create_tmpkey() {
	create_tmpdir
	TMPKEY="${TMPDIR}/id"
	cryptographic_id create "${TMPKEY}"
	cryptographic_id show "${TMPKEY}"
}
umask 0077
case "${1}" in
insecure)
	key="${DIR}/insecure/${2}"
	printf "Create key: %s\\n" "${key}"
	cryptographic_id create "${key}"
	cryptographic_id show "${key}"
	chmod 400 "${key}"
;;
insecure-age)
	key="${DIR}/age/${2}"
	printf "Create key: %s\\n" "${key}"
	create_tmpkey
	age -p -o "${key}" "${TMPKEY}"
	chmod 400 "${key}"
;;
tpm2)
	create_tmpdir
	key="${DIR}/tpm2/${2}"
	privdir="${key}"
	case "${3}" in
	"--handle-only")
		privdir="${TMPDIR}"
	;;
	"")
		true
	;;
	*)
		printf "Unknown parameter: %s\\n" "${3}"
		exit 1
	;;
	esac
	mkdir -p "${key}"
	cd "${TMPDIR}" || exit 1
	policy=""
	auth="str:x"
	create_attribute="|userwithauth"
	printf "Use PCRs? (empty for none or list of pcrs, e.g. 1,7) "
	read -r pcrs
	if [ "${pcrs}" != "" ]; then
		tpm2_startauthsession -S session.ctx
		tpm2_policypcr \
			--quiet \
			--policy policy.pcr \
			--session session.ctx \
			--pcr-list "sha256:${pcrs}"
		tpm2_flushcontext session.ctx
		printf "%s" "${pcrs}" > "${key}/pcrs"
		rm session.ctx
		policy="yes"
		auth=""
		create_attribute=""
	fi
	tpm2_createprimary \
		--quiet \
		--hierarchy e \
		--hash-algorithm sha256 \
		--key-algorithm ecc256 \
		--key-context primary.ctx \
		${policy:+"--policy"} ${policy:+"policy.pcr"} \
		--attributes "fixedtpm|fixedparent|sensitivedataorigin|userwithauth|restricted|decrypt"
	tpm2_create \
		--quiet \
		--key-algorithm ecc256 \
		--hash-algorithm sha256 \
		--public "${privdir}/ecc.pub" \
		--private "${privdir}/ecc.priv" \
		--parent-context primary.ctx \
		${policy:+"--policy"} ${policy:+"policy.pcr"} \
		${auth:+"--key-auth"} ${auth:+"${auth}"} \
		--format pem \
		--output "${key}/public_key.pem" \
		--attributes "fixedtpm|fixedparent|sensitivedataorigin${create_attribute}|noda|sign"
	if [ "${3}" = "--handle-only" ]; then
		tpm2_load \
			--quiet \
			--parent-context primary.ctx \
			--public "${privdir}/ecc.pub" \
			--private "${privdir}/ecc.priv" \
			--key-context ecc.ctx
		tpm2_evictcontrol \
			--quiet \
			--object-context ecc.ctx \
			--output "${key}/handle"
	fi
	openssl ec -outform der \
		-pubin -in "${key}/public_key.pem" \
		-pubout -out "${key}/public_key.der" > /dev/null
	dd if="${key}/public_key.der" of="${key}/public_key.raw" \
		bs=1 skip=26 count=65 status=none
	hash="$(dd if="${key}/public_key.raw" bs=1 skip=1 | \
		openssl dgst -sha256 -c --hex | \
		tr '[:lower:]' '[:upper:]')"
	printf "%s\\n\\n" "${hash}"
	printf "Fingerprint:\\n"
	printf "%s\\n" "${hash}" | \
		cut -c 18-40,42-64,66-88,90-113 --output-delimiter "${NL}"
	cd / || exit 1
	chmod 400 "${key}"/*
;;
*)
	help
;;
esac
